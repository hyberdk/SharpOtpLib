using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;

namespace SharpOtpLib
{
    public class QuickResponseCode
    {


        /// <summary>
        /// Generates a QR code bitmap for provisioning.
        /// This QR is generated by Google, so you need internet access!
        /// </summary>
        /// <param name="identifier">TOTP identifier</param>
        /// <param name="key">TOTP private key</param>
        /// <param name="width">width of QR image, must be between 50 and 1000. Width*height must also be less than 300000</param>
        /// <param name="height">height of QR image, must be between 50 and 1000. Width*height must also be less than 300000</param>
        /// <returns>QR PNG image as byte array</returns>
        public static byte[] GetQrImage(string identifier, byte[] key, int width, int height)
        {
            if (string.IsNullOrEmpty(identifier)) throw new ArgumentException("identifier cannot be null or empty", identifier);
            if (width > 1000) throw new ArgumentOutOfRangeException("width", width, "value must be between 50 and 1000");
            if (height > 1000) throw new ArgumentOutOfRangeException("height", height, "value must be between 50 and 1000");
            if (height * width > 300000) throw new ArgumentException("width * height must be less than 300000");

            var keyString = Base32.Convert(key);
            var provisionUrl = Base32.UrlEncode(string.Format("otpauth://totp/{0}?secret={1}", identifier, keyString));

            var chartUrl = string.Format("https://chart.apis.google.com/chart?cht=qr&chs={0}x{1}&chl={2}", width, height, provisionUrl);
            using (var client = new WebClient())
            {

                return client.DownloadData(chartUrl);
            }
        }

        /// <summary>
        /// Generates a link for Googles Chart API.
        /// </summary>
        /// <param name="identifier">TOTP identifier</param>
        /// <param name="key">TOTP private key</param>
        /// <param name="width">width of QR image, must be between 50 and 1000. Width*height must also be less than 300000</param>
        /// <param name="height">height of QR image, must be between 50 and 1000. Width*height must also be less than 300000</param>
        /// <returns>Link to Google Chart API that generates QR image</returns>
        public static string GetQrUrl(string identifier, string key, int width, int height)
        {
            if (!Utils.IsBase32Valid(key)) throw new ArgumentException("private key contains invalid base32 characters, only A-Z and 2-7 is allowed", key);
            byte[] bytekey = Base32.Convert(key);
            return GetQrUrl(identifier, bytekey, width, height);
        }

        /// <summary>
        /// Generates a link for Googles Chart API.
        /// </summary>
        /// <param name="identifier">TOTP identifier</param>
        /// <param name="key">TOTP private key</param>
        /// <param name="width">width of QR image, must be between 50 and 1000. Width*height must also be less than 300000</param>
        /// <param name="height">height of QR image, must be between 50 and 1000. Width*height must also be less than 300000</param>
        /// <returns>Link to Google Chart API that generates QR image</returns>
        public static string GetQrUrl(string identifier, byte[] key, int width, int height)
        {
            if (string.IsNullOrEmpty(identifier)) throw new ArgumentException("identifier cannot be null or empty", identifier);
            if (width > 1000) throw new ArgumentOutOfRangeException("width", width, "value must be between 50 and 1000");
            if (height > 1000) throw new ArgumentOutOfRangeException("height", height, "value must be between 50 and 1000");
            if (height * width > 300000) throw new ArgumentException("width * height must be less than 300000");
            var keyString = Base32.Convert(key);
            var provisionUrl = Base32.UrlEncode(string.Format("otpauth://totp/{0}?secret={1}", identifier, keyString));

            var chartUrl = string.Format("http://chart.apis.google.com/chart?cht=qr&chs={0}x{1}&chl={2}", width, height, provisionUrl);
            return chartUrl;

        }

    }
}
